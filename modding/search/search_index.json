{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ToolPanel/","title":"ToolPanel","text":"<p>Extends: ScrollContainer</p>"},{"location":"ToolPanel/#description","title":"Description","text":"<p>ToolPanel is the class representing the UI controls on the left side of the Dungeondraft interface. Every single tool in Dungeondraft, including new ones you create through Global.Editor.CreateModTool() is associated with a ToolPanel. This is the primary way a tool displays options available to a cartographer. The main concern for the modder should be creating new UI controls and associating any options or functionality to them. Whenever you see the property variable in a UI creation method, it automatically modifies that property in the associated Tool.</p> <p>To see how to use a ToolPanel instance, check out this example script: Example UI Script</p>"},{"location":"ToolPanel/#properties","title":"Properties","text":"<p> VBoxContainer Align ??? Tool bool UsesObjectLibrary bool UsesPathLibrary bool UsesModRightsidePanel bool IsRightsidePanel </p>"},{"location":"ToolPanel/#methods","title":"Methods","text":"<p> VBoxContainer BeginSection ( bool stretch = true ) VBoxContainer BeginNamedSection ( String name, bool stretch = true ) void EndSection ( ) Button CreateButton ( String label, String icon ) Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ) void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ) void CreateToggleGroup ( String property, Array options, Array labels, Array icons, int default = 0 ) CheckButton CreateCheckButton ( String label, String property, bool default ) void CreateLabel ( String label ) void CreateSeparator ( ) void CreateNote ( String text ) Array CreateRadioMenu ( String property, Array options ) OptionButton CreateDropdownMenu ( String property, Array options, String default ) OptionButton CreateLabeledDropdownMenu ( String property, String label, Array options, String default ) OptionButton CreateLayerMenu ( ) void CreateIconMenu ( String property, int default, Array options, bool sizeControl, ButtonGroup group ) HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ) Object CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ) void CreateFileSelector ( String property, String filter, String directory ) ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, Array presets ) Object CreateColorPalette ( String name, bool propertyOnly, String default, Array presets, bool multiselect, bool initToolColor = true ) void CreateTextureListMenu ( String property, Array textures, Array labels ) Object CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ) Object CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ) void CreateTilesetMenu ( String property ) void CreateTerrainListMenu ( String property ) void CreateExpandSlotsButton ( ) Object CreateTagsPanel ( ) void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ) Object CreateRightsidePanel ( String title ) void ForwardMethod ( String method ) void ForwardProperty ( value, String property ) void ForwardProperty_Enum ( String value, String property ) </p>"},{"location":"ToolPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>VBoxContainer Align:   This is the control that every UI control is attached to unless inside a section. </li> </ul> <ul> <li>Tool:   This is the control that every UI control is attached to unless inside a section. </li> </ul> <ul> <li>bool UsesObjectLibrary:   Test </li> </ul> <ul> <li>bool UsesPathLibrary:   Test </li> </ul> <ul> <li>bool UsesModRightsidePanel:   Test </li> </ul> <ul> <li>bool IsRightsidePanel:   Test </li> </ul>"},{"location":"ToolPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>VBoxContainer BeginSection ( bool stretch = true ):   Encloses all UI controls created afterwards inside a section. Must be closed with EndSection(). The parameter stretch causes the section to extend all the way to the bottom of the panel. </li> </ul> <ul> <li>VBoxContainer BeginNamedSection ( String name, bool stretch = true ):   Create a UI control section that can be referenced through Tool.Controls[name]. </li> </ul> <ul> <li>void EndSection ( ):   Ends the section and all UI controls created afterwards will not be included in the previous section. </li> </ul> <ul> <li>Button CreateButton ( String label, String icon ):   Creates and returns a Godot Button with label as display text and icon_path as the path to the icon displayed. </li> </ul> <ul> <li>Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ):   Creates and returns a toggle style Godot Button. </li> </ul> <ul> <li>void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ):   Creates a radio style Godot Button and pass in a ButtonGroup to allow a radio toggle. </li> </ul> <ul> <li>void CreateToggleGroup ( String property, Array options, Array labels, Array icons, int default = 0 ):   Creates a set of radio toggle but looks like tabbed buttons. The Arrays are of type String. </li> </ul> <ul> <li>CheckButton CreateCheckButton ( String label, String property, bool default ):   Creates and returns a Godot CheckButton. </li> </ul> <ul> <li>void CreateLabel ( String label ):   Creates a label. </li> </ul> <ul> <li>void CreateSeparator ( ):   Creates a horizontal separator. </li> </ul> <ul> <li>void CreateNote ( String text ):   Creates a framed label for a dev note. </li> </ul> <ul> <li>Array CreateRadioMenu ( String property, Array options ):   Creates a radio menu and returns the array of all the CheckBox. The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateDropdownMenu ( String property, Array options, String default ):   Creates and returns a Godot OptionButton (which is a dropdown menu) and autofill the menu with options.  The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateLabeledDropdownMenu ( String property, String label, Array options, String default ):   Creates a labelled dropdown menu. The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateLayerMenu ( ):   Creates and returns the dropdown menu representing the layer system for Objects, Paths, and Materials for Dungeondraft. There should only ever be a single instance of this UI control per tool if needed. To inspect the current selected layer, check the variable Global.Editor.Tools[\"mod_tool_id\"].ActiveLayer which returns the int of the layer value. </li> </ul> <ul> <li>void CreateIconMenu ( String property, int default, Array options, bool sizeControl, ButtonGroup group ):   Create a horizontal set of icon menu buttons like those used to select brush shapes. The option Array are of type String. </li> </ul> <ul> <li>HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ):   Creates and returns a Godot HSlider. The exponential parameter is an option that makes the slider use an exponential scale. </li> </ul> <ul> <li>Object CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ):   Creates and returns a Dungeondraft unique UI control RangeSlider. This control allows the user to pick a range of values instead of a single value. </li> </ul> <ul> <li>void CreateFileSelector ( String property, String filter, String directory ):   Creates a special UI control dedicated to selecting a file. The file_filter parameter is the file extension filter that is unique to each operating system. A modder needs to account for Windows, OSX, and Linux in the filter. The directory is the path to the default starting location for the file dialog that opens. </li> </ul> <ul> <li>ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, Array presets ):   Create a simple color selection control without a color palette. The presets Array are of type String. </li> </ul> <ul> <li>Object CreateColorPalette ( String name, bool propertyOnly, String default, Array presets, bool multiselect, bool initToolColor = true ):   Creates and returns a Dungeondraft UI control called a ColorPalette and fills it through the presets array. The Strings should be in hex color code format. The presets Array are of type String. </li> </ul> <ul> <li>void CreateTextureListMenu ( String property, Array textures, Array labels ):   Create a texture selection menu in list format. No longer used/deprecated. The Arrays are of type String. </li> </ul> <ul> <li>Object CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>Object CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu in wide format filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>void CreateTilesetMenu ( String property ):   Generate the menu that displays the floor tile options. </li> </ul> <ul> <li>void CreateTerrainListMenu ( String property ):   Generate the menu to select Terrain options. Passes the index of the selected option to property. </li> </ul> <ul> <li>void CreateExpandSlotsButton ( ):   Generate the CheckButton used to expand the Terrain slots. </li> </ul> <ul> <li>Object CreateTagsPanel ( ):   Generate the TagsPanel and adds it to the UI. </li> </ul> <ul> <li>void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ):   Update a toggle button's icons and labels. </li> </ul> <ul> <li>Object CreateRightsidePanel ( String title ):   Creates and returns a Dungeondraft right-side panel that behaves like the left-side tool panel and allows you to add more UI controls for your mod. Must be called from a ToolPanel you created for your mod tool, as it is registered to the tool. It will automatically open and close when your tool is selected. Only one is supported per tool. See Example UI Script for a usage example. </li> </ul> <ul> <li>void ForwardMethod ( String method ):   Helper function to forward a method invocation to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty ( value, String property ):   Helper function to forward a property change to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty_Enum ( String value, String property ):   Helper function to forward an enum change to the Tool. Not typically called manually. </li> </ul>"}]}